name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev, uat ]
  pull_request:
    branches: [ main, dev, uat ]
  workflow_dispatch: # Allow manual triggering

env:
  REGISTRY: docker.io
  IMAGE_NAME: naimjeem/todo-api-github-actions-self-host

jobs:
  # Test Job
  # test:
  #   runs-on: [self-hosted, linux, x64]
    
  #   services:
  #     postgres:
  #       image: postgres:15
  #       env:
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_DB: test_todoapp
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5432:5432

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '18'
  #       cache: 'npm'

  #   - name: Install dependencies
  #     run: npm ci

  #   - name: Run linting
  #     run: npm run lint

  #   - name: Run tests
  #     run: npm test
  #     env:
  #       NODE_ENV: test
  #       DB_HOST: localhost
  #       DB_PORT: 5432
  #       DB_NAME: test_todoapp
  #       DB_USER: postgres
  #       DB_PASSWORD: postgres
  #       JWT_SECRET: test-secret-key

  # Build and Push Job (only for main branch)
  build-and-push:
    runs-on: [self-hosted, linux, x64]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Fix Docker permissions
      run: |
        echo "Checking Docker permissions..."
        
        # Always try to add user to docker group and start daemon
        echo "Adding user to docker group..."
        sudo usermod -aG docker $USER || echo "Failed to add user to docker group"
        
        echo "Starting Docker daemon..."
        sudo systemctl start docker || echo "Failed to start Docker daemon"
        sudo systemctl enable docker || echo "Failed to enable Docker daemon"
        
        # Wait for Docker to be ready
        sleep 5
        
        # Test Docker access
        if sudo docker info >/dev/null 2>&1; then
          echo "‚úÖ Docker daemon is running (with sudo)"
        else
          echo "‚ùå Docker daemon is not running"
          exit 1
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      continue-on-error: true

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set Release Version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          tagVersion=${GITHUB_REF#refs/tags/}
          echo "RELEASE_VERSION=$tagVersion" >> $GITHUB_ENV
          echo "Using tag version: $tagVersion"
        else
          echo "RELEASE_VERSION=latest" >> $GITHUB_ENV
          echo "Using version: latest"
        fi
        echo "RELEASE_VERSION value: $RELEASE_VERSION"

    - name: Build and push Docker image
      run: |
        VERSION="${{ env.RELEASE_VERSION }}"
        if [ -z "$VERSION" ]; then VERSION="latest"; fi
        
        echo "Building image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION"
        
        # Try buildx first with sudo, fallback to regular docker build
        if sudo docker buildx build --platform linux/amd64,linux/arm64 -t "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION" --push .; then
          echo "‚úÖ Buildx build successful"
        else
          echo "‚ö†Ô∏è Buildx failed, trying regular docker build..."
          if sudo docker build -t "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION" .; then
            echo "‚úÖ Regular build successful"
            if sudo docker push "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION"; then
              echo "‚úÖ Push successful"
            else
              echo "‚ùå Push failed"
              exit 1
            fi
          else
            echo "‚ùå Both buildx and regular build failed"
            exit 1
          fi
        fi

  # Deploy Job (only for main branch)
  deploy:
    needs: build-and-push
    runs-on: [self-hosted, linux, x64]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production..."
        echo "Repository: https://github.com/naimjeem/todo-api-github-actions-self-host"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "Deployment would happen here in a real scenario"
        echo "This could include:"
        echo "- Updating Kubernetes manifests"
        echo "- Rolling out to production servers"
        echo "- Running health checks"
        echo "- Sending notifications"
        echo "- Deploying to: https://github.com/naimjeem/todo-api-github-actions-self-host"

  # Security Scan Job
  security-scan:
    runs-on: [self-hosted, linux, x64]
    if: github.ref == 'refs/heads/main'
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Notification Job
  notify:
    needs: [build-and-push, deploy]
    runs-on: [self-hosted, linux, x64]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.build-and-push.result }}" == "success" ] && [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
          echo "üéâ Todo App has been deployed to production"
        else
          echo "‚ùå Deployment failed!"
          echo "Please check the logs for more details"
        fi